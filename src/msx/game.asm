; ====================================================================================================
;
; game.asm
;
; include from main.asm
;
; ====================================================================================================
SECTION code_user

; ====================================================================================================
; ラウンド開始
; ====================================================================================================
ROUND_START:
    ; ■初回のみの処理実行
    JR Z,ROUND_START_INIT

    ; ■TICKが240カウント(=4秒)経過してなければ抜ける
    LD BC,240
    LD HL,(TICK1)    
    SBC HL,BC
    JR NZ,ROUND_START_EXIT

    ; ■マップ描画
    LD A,(ROUND)
    CALL COPY_MAP_DATA
    CALL DRAW_MAP

    ; ■スプライトキャラクターワークテーブル初期化
    CALL INIT_SPR_CHR_WK_TBL

    ; ■プレイヤー初期化
    ; @ToDo:マップデータの後に、プレイヤーの初期情報を置いて、そこから設定するようにしたい
    LD A,1
    CALL ADD_CHARACTER

    ; ■敵初期化
    ; @ToDo:マップデータの後に、敵の初期情報を置いて、そこから設定するようにしたい
;    LD B,5                          ; 敵の数
ROUND_START_L1:
;    LD A,2                          ; 2＝テキ1
;    CALL ADD_CHARACTER
;    DJNZ ROUND_START_L1             ; 敵の数だけ繰り返す

;    LD B,5                          ; 敵の数
ROUND_START_L2:
;    LD A,3                          ; 3＝テキ2
;    CALL ADD_CHARACTER
;    DJNZ ROUND_START_L2             ; 敵の数だけ繰り返す

    ; ■ゲーム状態変更
    LD A,STATE_GAME_MAIN            ; ゲーム状態 <- ゲームメイン
    CALL CHANGE_STATE

    ; ■BGM再生
    LD HL,_02
    CALL SOUNDDRV_BGMPLAY

ROUND_START_EXIT:
    RET

ROUND_START_INIT:
    ; ■ラウンド開始時の初回処理
;    CALL SCREEN_CLRAR               ; 画面クリア
    CALL CLEAR_OFFSCREEN             ; オフスクリーンクリア
    LD HL,STRING_ROUND_START
    CALL PRTSTR

    ; ■BGM再生
    LD HL,_01
    CALL SOUNDDRV_BGMPLAY

    RET


; ====================================================================================================
; ゲームメイン
; ====================================================================================================
GAME_MAIN:
    ; ■スプライトキャラクターワークテーブルの全ての要素に対して繰り返し
    LD B,MAX_CHR_CNT

GAME_MAIN_L1:
    ; ■対象のキャラクター番号からスプライトキャラクターワークテーブルのアドレスを取得
    LD A,B
    SUB 1
    CALL GET_SPR_WK_ADDR            ; IX <- 対象のスプライトキャラクターワークテーブルのアドレス

    ; ■BCレジスタをスタックに退避
    PUSH BC

    ; ■対象のキャラクター番号からキャラクターロジックテーブルのアドレスを取得
    LD A,(IX)                       ; A <- キャラクター番号
    OR A
    JR Z,GAME_MAIN_L2               ; ゼロの場合はGAME_MAIN_L2へ
    LD HL,CHARACTER_UPDATE_TABLE    ; HL <- キャラクターロジックテーブルのアドレス
    CALL TBL_JP

GAME_MAIN_L2:
    ; ■BCレジスタをスタックから復元 
    POP BC

    DJNZ GAME_MAIN_L1

;    ; ■画面更新
;    CALL DRAW

GAME_MAIN_EXIT:
    RET


; ====================================================================================================
; プレイヤーミス
; ====================================================================================================
PLAYER_MISS:


PLAYER_MISS_EXIT:
    RET


; ====================================================================================================
; ゲームオーバー
; ====================================================================================================
OVER:


OVER_EXIT:
    RET


; ====================================================================================================
; ラウンドクリアー
; ====================================================================================================
ROUND_CLEAR:


ROUND_CLEAR_EXIT:
    RET


SECTION rodata_user
; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================

STRING_ROUND_START:
    DW $0109
	DB "READY ROUND 1",0
